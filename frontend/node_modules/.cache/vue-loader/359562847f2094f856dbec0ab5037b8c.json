{"remainingRequest":"L:\\softDev\\personal\\5Chat\\twitterBot\\frontend\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!L:\\softDev\\personal\\5Chat\\twitterBot\\frontend\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!L:\\softDev\\personal\\5Chat\\twitterBot\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!L:\\softDev\\personal\\5Chat\\twitterBot\\frontend\\src\\components\\GeneralData.vue?vue&type=template&id=d71b649c&","dependencies":[{"path":"L:\\softDev\\personal\\5Chat\\twitterBot\\frontend\\src\\components\\GeneralData.vue","mtime":1628310035036},{"path":"L:\\softDev\\personal\\5Chat\\twitterBot\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"L:\\softDev\\personal\\5Chat\\twitterBot\\frontend\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"L:\\softDev\\personal\\5Chat\\twitterBot\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"L:\\softDev\\personal\\5Chat\\twitterBot\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}